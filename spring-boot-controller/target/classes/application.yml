spring:
  profiles:
    active: dev
  application:
    name: com.li.controller
  datasource:
    url: jdbc:mysql://${mysqlServer.ip}:${mysqlServer.port}/spring_boot?createDatabaseIfNotExist=true&useUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2b8&allowMultiQueries=true
    username: ${mysqlServer.name}
    password: ${mysqlServer.password}
    driver-class-name: com.mysql.cj.jdbc.Driver
    druid:
      initial-size: 3
      min-idle: 3
      max-active: 10
      max-wait: 60000
      stat-view-servlet:
        login-username: root
        login-password: 1234
      filter:
        stat:
          log-slow-sql: true
          slow-sql-millis: 2000
    type: com.alibaba.druid.pool.DruidDataSource
  jpa:
    properties:
      hibernate:
        hbm2ddl.auto: update
        dialect: org.hibernate.dialect.MySQL5InnoDBDialect
        format_sql: true
    show-sql: true

  http:
    multipart:
      max-file-size: 100MB
      max-request-size: 200MB
  #redis
  redis:
    database: 0
    host: ${redisServer.ip}
    port: ${redisServer.port}
    password: ${redisServer.password}
    pool:
      jedis:
        pool:
          max-idle: 8
          max-wait:
          min-idle: 0
    timeout: 5000

  jackson:
   date-format: yyyy-MM-dd HH:mm:ss
   time-zone: GMT+8
  cache:
    type: redis
#MongoDB
  data:
    mongodb:
      uri: mongodb://localhost:27017/test

#kafka
#  kafka:
    # 指定kafka server的地址，集群配多个，中间，逗号隔开
    bootstrap-servers: 106.54.73.45:9092
    producer:
      # 写入失败时，重试次数。当leader节点失效，一个repli节点会替代成为leader节点，此时可能出现写入失败，
      # 当retris为0时，produce不会重复。retirs重发，此时repli节点完全成为leader节点，不会产生消息丢失。
      retries: 0
      # 每次批量发送消息的数量,produce积累到一定数据，一次发送
      batch-size: 1024
      # produce积累数据一次发送，缓存大小达到buffer.memory就发送数据
      buffer-memory: 10240
      #procedure要求leader在考虑完成请求之前收到的确认数，用于控制发送记录在服务端的持久化，其值可以为如下：
      #acks = 0 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下，无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1。
      #acks = 1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader在确认记录后立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失。
      #acks = all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是最强有力的保证，这相当于acks = -1的设置。
      #可以设置的值为：all, -1, 0, 1
      acks: 1
      # 指定消息key和消息体的编解码方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      # 指定默认消费者group id --> 由于在kafka中，同一组中的consumer不会读取到同一个消息，依靠groud.id设置组名
      group-id: testGroup
      auto-offset-reset: earliest
      enable-auto-commit: true
      auto-commit-interval: 100
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer


#Mybatis
mybatis:
  type-aliases-package: com.li.domain
  configuration:
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl  #打印sql语句
